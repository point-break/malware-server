import {User, Alarm} from 'model'

const checkSubmission = (submission) => {
  const {wind_speed, rain, temp, cloud, swell_period, tide} = submission
  const errorMessages = []
  
  const checkSequential = (title, item) => {
    if (item && item.length !== 2) {
      return errorMessages.push(`${title} should be a range with two values.`)
    }
    if (item && !(item[0] < item[1])) {
      return errorMessages.push(`${title} must be in order.`)
    }
  }
  checkSequential('wind_speed', wind_speed)
  checkSequential('rain', rain)
  checkSequential('temp', temp)
  checkSequential('cloud', cloud)
  checkSequential('swell_period', swell_period)
  checkSequential('tide', tide)
  if (errorMessages.length) {
    return new Error(errorMessages)
  }
}

export default (req, res, next) => {
  let alarm
  
  const {body: submission} = req
  
  submission['location'] = [
    parseFloat(submission['location'][1]),
    parseFloat(submission['location'][0])
  ]
  console.log(submission)
  
  const submissionError = checkSubmission(submission)
  
  if (submissionError instanceof Error) {
    submissionError.status = 400
    return next(submissionError)
  }
  
  new Alarm(submission)
    .save()
    .then(document => {
      alarm = document
      return User
        .get(res.locals.user.id)
        .addRelation('alarm', {id: alarm.id})
    })
    .then(() => {
      User
        .get(res.locals.user.id)
        .addRelation('alert', {id: alarm.id})
    })
    .then(() => {
      res
        .location('/api/alarm/' + alarm.id)
        .status(201)
        .jsonp(alarm)
    })
    .catch(error => {
      error.status = 500
      next(error)
    })
}
