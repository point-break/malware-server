import passport from 'passport'
import {Router} from 'express'

import addUser from 'auth/lib/addUser'
import addStrategyToUser from 'auth/lib/addStrategyToUser'
import findOrCreateStrategy from 'auth/lib/findOrCreateStrategy'
import {createToken} from 'auth/lib/token'

import github from 'auth/strategy/github'

passport.use(github)

const router = new Router()

router.get('/logout', (req, res) => res
  .cookie(`${process.env.APP_CODE}_auth`, {}, {expires: new Date()})
  .status(200)
  .redirect(`${process.env.FRONTEND_HOST}`)
)

const strategies = ['local', 'github']

router.get('/:strategy', ({params: {strategy: strategy}}, res, next) => {
  if (strategies.indexOf(strategy) === -1) {
    const error = new Error('Invalid strategy')
    error.status = 404
    return next(error)
  }
  next()
})

router.get('/:strategy', (req, res, next) => passport
  .authenticate(req.params.strategy)(req, res, next)
)

router.get('/:strategy/callback', (req, res, next) => passport
  .authenticate(req.params.strategy, (err, strategy, info) => {
    if (err) {
      err.status = 500
      return next(err)
    }
    if (!strategy) {
      const error = new Error('Error loading or creating user.')
      error.status = 500
      return next(error)
    }
    findOrCreateStrategy({
      strategy
    })
      .then(strategy => {
        if (strategy.user && !res.locals.user) {
          return strategy.user
        }
        if (strategy.user) {
          const error = new Error(`Third party account already linked to a ${process.env.APP_TITLE} user.`)
          error.status = 403
          return next(error)
        }
        if (res.locals.user) {
          return addStrategyToUser(res.locals.user, strategy)
        }
        return addUser(info, strategy)
      })
      .then((user) => {
        const {token, expires} = createToken(user)
        const redirectUri = `${process.env.BACKEND_API_URL}`
        res
          .cookie(
            `${process.env.APP_CODE}_auth`,
            token,
            {
              expires: req.body.remember ? expires : null,
              httpOnly: false
            }
          )
          .redirect(redirectUri)
      })
      .catch(error => {
        error.status = 500
        return next(error)
      })
  })(req, res, next)
)

export default router
